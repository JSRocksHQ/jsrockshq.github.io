<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>ES6 Rocks</title>
        <link>http://es6rocks.com</link>
        <description>A website dedicated to teach all about ES6</description>
        <managingEditor>ES6 Rocks</managingEditor>
        <webMaster>ES6 Rocks</webMaster>
        <pubDate>Wed, 05 Nov 2014 13:23:27 GMT</pubDate>
        <language>cn</language>
        <atom:link href="http://es6rocks.com/cn/rss.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>使用6to5，让今天就来写ES6的模块化开发！</title>
            <link>http://es6rocks.com/cn/2014/11/6to5-es6</link>
            <description><![CDATA[<h1 id="-6to5-es6-">使用6to5，让今天就来写ES6的模块化开发！</h1>
<p>我之前在Twitter上发过一个照片，表达出我有多快乐，这像是一个时光机让我们可以穿梭到未来-ES6的时代！下面让我来展示如何使用6to5让今天就可以练手ES6的模块化。</p>
<figure>
    <a href="http://es6rocks.com/img/modules-today-6to5.png">
        <img src="http://es6rocks.com/img/modules-today-6to5.png" alt="home" />
    </a>
    <figcaption>使用6to5让今天就可以练手ES6的模块化</figcaption>
</figure>

<h1 id="-">第一步</h1>
<p>如果你现在还不了解ES6的模块化开发，请在<a href="http://JSModules.io">JSModules.io</a>上了解一下。我也推荐大家读一下@jcemer的文章<a href="http://es6rocks.com/2014/07/a-new-syntax-for-modules-in-es6/">A new syntax for modules in ES6</a>，它涉及到了很多非常酷的关于JS模块化的东西。他可以指导我们使用6to5。总的来说，6to5能在支持ES5d的环境下提前尝试ES6 模块化开发的快感。
6to5比其他降级工具有一下几个优势：</p>
<ul>
<li>可读性：你的格式化的代码尽可能的保留。</li>
<li>可扩展性：有非常庞大的插件库和浏览器的支持。</li>
<li>可调式性：因为支持source map，你可以方便的调试已经编译过后的代码</li>
<li>高效率：直接转化为与ES相当的代码，不会增加额外的运行十几</li>
</ul>
<h1 id="-">一起来写模块</h1>
<p>让我们来尝试着写模块吧！
我们的应用除了输出日志不会做其他事情，其主要的目的就是让你了解模块化如何工作和如何让你现有的环境使用ES6的模块化开发。
基本的目录结构：</p>
<pre><code>├── Gruntfile.js
├── package.json
└── src
    ├── app.js
    ├── modules
    │   ├── bar.js
    │   ├── baz.js
    │   └── foo.js
    └── sample
        └── index.html
</code></pre><p>app.js是主程序，包含了我们将要存储的模块化的目录
下面是app.js的代码：</p>
<pre><code class="lang-javascript">import foo from &quot;./modules/foo&quot;;
import bar from &quot;./modules/bar&quot;;

console.log(&#39;From module foo &gt;&gt;&gt; &#39;, foo);
console.log(&#39;From module bar &gt;&gt;&gt; &#39;, bar);
</code></pre>
<p>以上代码非常简单，我们导入了foo模块和bar模块，然后分别打印出他们</p>
<pre><code class="lang-javascript">// foo.js
let foo = &#39;foo&#39;;

export default foo;


// bar.js
let bar = &#39;bar&#39;;

export default bar;
</code></pre>
<p>在这些模块一面我们只是导出了两个字符串&#39;foo&#39;和&#39;bar&#39;，当我们导入这些模块，我们的变量其实已经有数据。
当然，我们何以导出对象，类，函数，等等
现在，你可以开始模仿这个例子写出你自己的模块</p>
<h1 id="-">构建</h1>
<p>就像你已经知道的，<a href="http://kangax.github.io/compat-table/es6/">ES6不支持你现在的浏览器和Node</a>.js，只有一条路，那就是使用降级转换器来编写ES6的模块化代码。
正如我之前提到的那个，我使用6to5，他可以精确的达到我们想要的效果。
这个任务是运行在Grunt上的,我们使用 @sindresorhus的 <a href="https://github.com/sindresorhus/grunt-6to5">grunt-6to5</a></p>
<pre><code class="lang-shell">npm install grunt-cli -g
npm install grunt --save-dev
npm install grunt-6to5 --save-dev
</code></pre>
<p>我们的Gruntfile类似于一下：</p>
<pre><code class="lang-javascript">grunt.initConfig({
    &#39;6to5&#39;: {
        options: {
            modules: &#39;common&#39;
        },

        build: {
            files: [{
                expand: true,
                cwd: &#39;src/&#39;,
                src: [&#39;**/*.js&#39;],
                dest: &#39;dist/&#39;,
            }],
        }
    }
});
</code></pre>
<p>这是个简单又给力的配置，我们也几乎完成了。
当你指定好源文件和输出文件后，这个任务就可以来运行了。
&#39;common&#39;选项的目的在于告诉6to5我们将输出ES5CommonJS模块化风格。
当然，6to5也支持AMD，我写了sample/index.html，让他在浏览器环境下测试一下，这个HTML的代码如下：</p>
<pre><code class="lang-html">&lt;!doctype html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;ES6 modules 6to5&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;script src=&quot;//[cdnjs URL]/require.min.js&quot;&gt;&lt;/script&gt;
    &lt;script&gt;
        require([&#39;app.js&#39;]);
    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>观察上面的代码，我们使用AMD的RequireJS框架来加载这个JS，对于这个例子，你需要将上面的配置文件改为 modules: &#39;amd&#39;</p>
<h1 id="-">运行</h1>
<p>万事俱备东风只欠，我们的代码已经放在<a href="https://github.com/es6rocks/es6-modules-today-with-6to5">es6-modules-today-with-6to5</a>，你可以克隆下来自己玩玩。使用npm install安装6to5</p>
<p>记住一点，Grunt任务会生成一个目标文件夹来存放转化后的代码
所以，如果你想测试使用CommonJS规范的转化后的ES6的代码，你可以执行一下命令</p>
<pre><code class="lang-shell">node dist/app.js
</code></pre>
<figure>
    <a href="http://es6rocks.com/img/running-node.png">
        <img src="http://es6rocks.com/img/running-node.png" alt="home" />
    </a>
    <figcaption>Node.js上的运行效果</figcaption>
</figure>

<p>如果你使用AMD规范的，请在浏览器访问index.html(<strong>吐槽一下，老外竟然不知道中国的<a href="https://github.com/seajs/seajs">sea.js</a></strong>)</p>
<figure>
    <a href="http://es6rocks.com/img/amd-es6.png">
        <img src="http://es6rocks.com/img/amd-es6.png" alt="home" />
    </a>
    <figcaption>在浏览器执行的效果</figcaption>
</figure>

<h1 id="-">结论</h1>
<p>通过这个简单的实例你学会了如果简单的使用ES6模块化风格来编写代码。6to5是胃肠棒的工具让你穿越到未来提前体验ES6模块化带来的快感。资源下载<a href="https://github.com/es6rocks/es6-modules-today-with-6to5">es6-modules-today-with-6to5</a>，欢迎提交一些问题的反馈</p>
]]></description>
            <pubDate>Wed, 05 Nov 2014 13:21:05 GMT</pubDate>
            <guid>http://es6rocks.com/cn/2014/11/6to5-es6</guid>
        </item>
        
    </channel>
</rss>
